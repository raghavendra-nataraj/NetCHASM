# threads: <num>
# Creates a maximum <num> worker threads to do the healthchecks.
threads: 20

# connectiontimeout: <timeout in milliseconds>
# modifies the connection timeout for every healthcheck.

# config.load-directory: <directory>
# Path containing check configs.
# The path should be a absolute path.

# config.load-file: <file>
# Path of individual check config files.
# The path should be a absolute path.

# dns.lookup-timeout: <num>
# Timeout for the dns server to respond.
# Time is in milliseconds

# dns.host: <ipaddress>
# Specify the dns server.
# The server can be ipv4 or ipv6 address.

# dns.lookuptype: <type>
# values: ares
# default: ares

# dns.statictype: <type>
# values: static
# default: static

# http.type: <curl>
# Plugin to use for HTTP HealthCheck. 
# Default is curl.

# ftp.type: <curl>
# Plugin to use for ftp HealthCheck.
# Default is curl.

# tcp.type: <rawsocket>
# Plugin to use for tcp HealthCheck. 
# Default is rawsocket.

# dnscheck.type: <ares>
# Plugin to use for dns HealthCheck. 
# Default is ares.

# none.type: <none>
# Plugin to use for none healthcheck.
# Default is none.

# db.type: <mdbm/text>
# Backend database to use.
# Default is mdbm.

# db.path: <path>
# Path of the database file.
# The path should be a absolute path.

# db.healthCheckCommitPolicy: <policy>
# db.auxCommitPolicy: <policy>
# The policy used to update the backend in the host group storage type
# Options are:
# always - always update the storage on every host check.
# first - update the group when the first host in the group is checked.
# fullcycle - update the group each time every host in the group is checked at least once.
# ttl - update the group after the ttl for the group expires.

# log.path: <path>
# Path of the log file.
# The path should be a absolute path.

# log.type: <text>
# Plugin to use for logging

# log.verbosity: <1-9> or <error, none, off, emerg, alert, critical, error, warning, notice, info, debug, debug2, debug3>
# Verbosity level of logging.

# log.timeFormat: <format>
# The log time format used. Default %Y%m%d.%Hh%Mm%Ss

# log.maxQueue: <max>
# The max size of the log queue. If it exceeds this value, logs will be dropped 
# Default 2056


# socket.path: <path>
# Path where the unix socket should be establised.
# Default path is /var/run/netchasm/controlsocket
# The path should be a absolute path.

# aux.path: <path>
# Path where the load feedback files should be stored.
# The path should be a absolute path.

# control-server-linux: <on/off>
# Enable linux server 

# control-server-ipv4: <on/off>
# Enable IPv4 server

# control-server-ipv6: <on/off>
# Enable IPv6 server

# master-check-portv4: <num>
# Port for IPv4 control server

# master-check-portv6: <num>
# Port for IPv6 control server

# enable-mutual-auth: <on/off>
# Enable mutual authentication for remote checks

# enable-secure-remote: <on/off>
# Enable encrypted comunication for remote health checks
# the cert-file, key-file needs to set for enabling remote checks

# enable-shared-connection: <on/off>
# Use persistent connections for remote health checks

# max-remote-connections: <num>
# Number of persistent connection to be created for remote checks
# max-remote-connections can be set to a max of 125
  
# cert-file: <path>
# The cert file to be used for remote checks

# key-file: <path>
# The key file to be used for remote checks

# ca-file: <path>
# The Certificate Authority for validating TLS remote connections

# hc-cert-file <path>
# certificate file for TLS mutual authentication in health checks 
#
# hc-key-file <path>
# private key file for TLS mutual authentication in health checks 
#
# hc-ca-file <path>
# CA certificate key file for TLS mutual authentication in health checks

